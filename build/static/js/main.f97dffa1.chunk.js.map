{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+NAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAC7B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCajC,EAfA,WAEX,OADgBK,IAAMC,IAHV,UAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KARV,SAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,SAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCJ9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKb,UAAU,SACVa,I,8NCJb,IAAMC,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uGAkGGC,EA7FH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKzB,MAAK,SAAA0B,GAAY,OAAIT,EAASS,QACpC,IAEH,IAAMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aA+B1BmC,EAAqB,SAAAxB,GACvB,IAAMd,EAAOyB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,E,yVAAW,IAAOzC,EAAP,CAAaG,WAAYH,EAAKG,YAE/C+B,EACYpB,EAAI2B,GACXhC,MAAK,SAAAiC,GACFhB,EAASD,EAAMkB,KAAI,SAAA3C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO0C,SAEtDE,OAAM,SAAAC,GACHb,EAAgB,SAAD,OACFhC,EAAKK,QADH,sCAGfyC,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,UAKhD,OACI,6BACI,qCAEA,kBAAC,EAAD,CAAcG,QAASc,IAEvB,6BACI,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BA7DWO,EAAYO,KAAI,SAAA3C,GAAI,OACnC,kBAAC,EAAD,CACI+C,IAAK/C,EAAKc,GACVd,KAAMA,EACNC,iBAAkB,kBAAMqC,EAAmBtC,EAAKc,WA4DhD,0BAAMkC,SApDE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf9C,QAASsB,EACTyB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,GAC3B1C,GAAIW,EAAMgC,OAAS,GAGvBvB,EACYiB,GACP1C,MAAK,SAAAE,GACFe,EAASD,EAAMiC,OAAO/C,IACtBiB,EAAW,SAwCX,2BACI+B,MAAOhC,EACPiC,SA3DS,SAACX,GACtBrB,EAAWqB,EAAMY,OAAOF,UA4DhB,4BAAQG,KAAK,UAAb,SAGJ,kBAAC,EAAD,QCvGZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f97dffa1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\n// const baseUrl = 'http://localhost:3001/notes';\r\n// const baseUrl = 'https://osa-3.herokuapp.com/notes';\r\nconst baseUrl = '/notes';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update\r\n}\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    };\n\n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n        </div>\n    )\n};\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('');\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => setNotes(initialNotes))\n    }, []);\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n\n    const rows = () => notesToShow.map(note =>\n        <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n        />\n    );\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    };\n\n    const addNote = (event) => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1,\n        };\n\n        noteService\n            .create(noteObject)\n            .then(data => {\n                setNotes(notes.concat(data));\n                setNewNote('')\n            })\n    };\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id);\n        const changedNote = {...note, important: !note.important};\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                );\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000);\n                setNotes(notes.filter(n => n.id !== id))\n            })\n\n    };\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage}/>\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {rows()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n\n            <Footer/>\n        </div>\n    )\n};\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}